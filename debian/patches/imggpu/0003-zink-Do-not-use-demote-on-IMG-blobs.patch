From 15fe92ce964d1dd80fc3bde61f863d9172390c07 Mon Sep 17 00:00:00 2001
From: Icenowy Zheng <uwu@icenowy.me>
Date: Thu, 16 Jan 2025 09:05:31 +0800
Subject: [PATCH 3/8] zink: Do not use demote on IMG blobs

The implementation of demote in IMG blobs seems to be a piece of hack,
and the current use of it in Zink leads to assertion failure with
information "Uniflex does not support demote and terminate in the same
shader".

Disable usage of demote for IMG blobs.

Signed-off-by: Icenowy Zheng <uwu@icenowy.me>
---
 src/gallium/drivers/zink/zink_compiler.c |  3 ++-
 src/gallium/drivers/zink/zink_screen.c   | 15 +++++++++++++--
 src/gallium/drivers/zink/zink_types.h    |  1 +
 3 files changed, 16 insertions(+), 3 deletions(-)

diff --git a/src/gallium/drivers/zink/zink_compiler.c b/src/gallium/drivers/zink/zink_compiler.c
index 6e7f3f5500f..25422783e5f 100644
--- a/src/gallium/drivers/zink/zink_compiler.c
+++ b/src/gallium/drivers/zink/zink_compiler.c
@@ -1465,7 +1465,8 @@ zink_screen_init_compiler(struct zink_screen *screen)
        zink_driverid(screen) == VK_DRIVER_ID_AMD_PROPRIETARY)
       screen->nir_options.lower_doubles_options = nir_lower_dmod;
 
-   if (screen->info.have_EXT_shader_demote_to_helper_invocation)
+   if (screen->info.have_EXT_shader_demote_to_helper_invocation &&
+       !screen->driver_compiler_workarounds.broken_demote)
       screen->nir_options.discard_is_demote = true;
 }
 
diff --git a/src/gallium/drivers/zink/zink_screen.c b/src/gallium/drivers/zink/zink_screen.c
index 56b0c350fe0..cfcad5594c3 100644
--- a/src/gallium/drivers/zink/zink_screen.c
+++ b/src/gallium/drivers/zink/zink_screen.c
@@ -750,8 +750,9 @@ zink_get_param(struct pipe_screen *pscreen, enum pipe_cap param)
       return false;
 
    case PIPE_CAP_DEMOTE_TO_HELPER_INVOCATION:
-      return screen->spirv_version >= SPIRV_VERSION(1, 6) ||
-             screen->info.have_EXT_shader_demote_to_helper_invocation;
+      return (screen->spirv_version >= SPIRV_VERSION(1, 6) ||
+              screen->info.have_EXT_shader_demote_to_helper_invocation) &&
+             !screen->driver_compiler_workarounds.broken_demote;
 
    case PIPE_CAP_SAMPLE_SHADING:
       return screen->info.feats.features.sampleRateShading;
@@ -3013,6 +3014,16 @@ init_driver_workarounds(struct zink_screen *screen)
       break;
    }
 
+   /* these drivers do not implement demote properly */
+   switch (zink_driverid(screen)) {
+   case VK_DRIVER_ID_IMAGINATION_PROPRIETARY:
+      screen->driver_compiler_workarounds.broken_demote = true;
+      break;
+   default:
+      screen->driver_compiler_workarounds.broken_demote = false;
+      break;
+   }
+
    /* When robust contexts are advertised but robustImageAccess2 is not available */
    screen->driver_compiler_workarounds.lower_robustImageAccess2 =
       !screen->info.rb2_feats.robustImageAccess2 &&
diff --git a/src/gallium/drivers/zink/zink_types.h b/src/gallium/drivers/zink/zink_types.h
index e86a60a1e2b..00fcab41188 100644
--- a/src/gallium/drivers/zink/zink_types.h
+++ b/src/gallium/drivers/zink/zink_types.h
@@ -1536,6 +1536,7 @@ struct zink_screen {
       bool needs_sanitised_layer;
       bool io_opt;
       bool broken_const;
+      bool broken_demote;
    } driver_compiler_workarounds;
    struct {
       bool broken_l4a4;
-- 
2.49.0

